(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{342:function(t,n,e){"use strict";e.r(n);var s=e(3),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"公平锁与非公平锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#公平锁与非公平锁"}},[t._v("#")]),t._v(" 公平锁与非公平锁")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul")]),e("p"),t._v(" "),e("blockquote",[e("p",[t._v("公平锁：")])]),t._v(" "),e("p",[t._v("多个线程按照申请锁的顺序去获得锁，线程会直接进入队列去排队，永远都是队列的第一位才能得到锁。优点：所有的线程都能得到资源，不会饿死在队列中。缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，cpu唤醒阻塞线程的开销会很大。")]),t._v(" "),e("blockquote",[e("p",[t._v("非公平锁：")])]),t._v(" "),e("p",[t._v("多个线程去获取锁的时候，会直接去尝试获取，获取不到，再去进入等待队列，如果能获取到，就直接获取到锁。优点：可以减少CPU唤醒线程的开销，整体的吞吐效率会高点，CPU也不必取唤醒所有线程，会减少唤起线程的数量。缺点：你们可能也发现了，这样可能导致队列中间的线程一直获取不到锁或者长时间获取不到锁，导致饿死。")]),t._v(" "),e("p",[t._v("作者：慕课网\n链接：https://zhuanlan.zhihu.com/p/115543000\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])])}),[],!1,null,null,null);n.default=a.exports}}]);